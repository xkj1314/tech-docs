<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SBCloud Documentation</title>
    <link>https://sbcloud.github.io/tech-docs/</link>
    <description>Recent content on SBCloud Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Jun 2019 12:30:18 +0800</lastBuildDate>
    
	<atom:link href="https://sbcloud.github.io/tech-docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第1章 ECSインスタンスの作成</title>
      <link>https://sbcloud.github.io/tech-docs/%E6%9C%80%E5%88%9D%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D/create-virtual-servers/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/%E6%9C%80%E5%88%9D%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D/create-virtual-servers/</guid>
      <description>この記事では、Terraformを使用してECSインスタンスを作成する方法について説明します。
 VPCとVSwitchを作成します
 terraform.tfファイルを作成して次のように入力し、現在の実行ディレクトリに保存します。
resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;tf_test_foo&amp;quot; cidr_block = &amp;quot;172.16.0.0/12&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; cidr_block = &amp;quot;172.16.0.0/21&amp;quot; availability_zone = &amp;quot;cn-beijing-b&amp;quot; }  作成を開始するために terraform applyを実行してください。
 作成したVPCとVSwitchを表示するために terraform showを実行します。
VPCコンソールにログオンして、VPCとVSwitchの属性を表示することもできます。
  セキュリティグループを作成し、前の手順で作成したVPCに適用します。
 terraform.tfファイルに以下を追加します。
resource &amp;quot;alicloud_security_group&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;default&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; } resource &amp;quot;alicloud_security_group_rule&amp;quot; &amp;quot;allow_all_tcp&amp;quot; { type = &amp;quot;ingress&amp;quot; ip_protocol = &amp;quot;tcp&amp;quot; nic_type = &amp;quot;intranet&amp;quot; policy = &amp;quot;accept&amp;quot; port_range = &amp;quot;1/65535&amp;quot; priority = 1 security_group_id = &amp;quot;${alicloud_security_group.</description>
    </item>
    
    <item>
      <title>Alibaba Cloudサービスの一覧</title>
      <link>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/simple_compare/</link>
      <pubDate>Wed, 15 May 2019 10:37:37 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/simple_compare/</guid>
      <description>云计算基础（Cloud Essentials）：云基础产品体系完整度全球领先，基础产品及功能持续投入建设，源源不断的通过新技术提高企业云上的计算、运维、开发和管理能力。 Cloud Essentials：クラウドベースの製品システムの中核は世界をリードし、基本的な製品と機能は構築され続けています新しいテクノロジーは、エンタープライズクラウドのコンピューティング、運用と保守、開発および管理機能を向上させるために使用されます。    カテゴリ カテゴリ_日本語訳 中国版_サービス名 中国版_サービス名_日本語翻訳 中国版_コメント_日本訳 国際版_サービス名 国際版_コメント_日本訳 日本版_サービス名 日本版_コメント     云服务器 クラウドサーバー 云服务器 ECS クラウドサーバーECS セキュアからインメモリ、アドバンストからエントリーレベルのクラウドサーバーまで Elastic Compute Service Alibaba Cloud Elastic Compute Service（ECS）は、高速なメモリと最新のIntel CPUを提供して、クラウドアプリケーションに電力を供給し、低遅延でより速い結果を達成するのに役立ちます。 すべてのECSインスタンスには、DDoS攻撃やトロイの木馬攻撃からデータやアプリケーションを保護するためのDDoS対策保護が付属しています。 Elastic Compute Service Elastic Compute Service（ECS）とはAlibaba Cloud Elastic Compute Service (ECS) は、信頼性と拡張性に優れた分散コンピューティングリソースをオンデマンドで提供するオンラインコンピューティングサービスです。ECS を使用すると、クラウドコンピューティング環境を完全に制御できます。ECS では、コンピューティングリソースを即座にデプロイし、ビジネスや Web アプリケーションのニーズにリアルタイムで対応できます。Alibaba Cloud はハイメモリおよび高性能な Intel CPU を使用することで高速な仮想サーバーを実現します。   云服务器 クラウドサーバー 弹性裸金属服务器（神龙） 柔軟なベアメタルサーバー（Shenlong） 仮想マシンの柔軟性と物理マシンの高性能、安全な物理的分離、正確な配信、クラウド製品の完全な互換性 ECS Bare Metal Instance Alibaba Cloudが独自に開発した次世代の仮想化テクノロジに基づいたECS Bare Metal Instanceは、仮想サーバーの弾力性と物理サーバーの高性能で包括的な機能の両方を備えています。 その前身と比較して、これらのインスタンスの次世代仮想化テクノロジは、標準のElastic Compute Service（ECS）およびネスト化された仮想化テクノロジをサポートする点で優れています。 これにより、物理サーバーと同じユーザーエクスペリエンスを提供しながら、一般的なECSの弾力性を維持することができます。 ECS Bare Metal Instance Alibaba Cloud が独自に開発した次世代仮想化技術により、ECS Bare Metal Instance は、仮想サーバーの柔軟性と、物理サーバーの高性能で包括的な機能を両方兼ね備えています。これまでの技術に比べて、標準の Elastic Compute Service (ECS) 仮想化技術およびネストされた仮想化技術 (Nested Virtualization) への対応に優れています。これにより、物理サーバーと同じパフォーマンスを提供しながら ECS の柔軟性を維持できます。   云服务器 クラウドサーバー 轻量应用服务器 軽量アプリケーションサーバー 迅速に構築および管理が容易な軽量クラウドサーバー Simple Application Server Simple Application Serverは、スタンドアロンアプリケーションシナリオ用の新世代コンピューティングサービスです。 ワンクリックのアプリケーション展開を提供し、ドメイン名解決、Webサイトの公開、セキュリティ、Oなどのオールインワンサービスをサポートします。 []()    云服务器 クラウドサーバー GPU 云服务器 GPUクラウドサーバ GPUインスタンス、強力なコンピューティングパフォーマンス、柔軟なオンデマンド拡張 Elastic GPU Service Elastic GPU Service（EGS）は、ディープラーニング、ビデオ処理、科学計算、視覚化などのシナリオに最適なGPUベースのコンピューティングサービスです。 EGSソリューションは、以下のGPUを使用します：AMD FirePro S7150、NVIDIA Tesla M40、NVIDIA Tesla P100、NVIDIA Tesla P4、およびNVIDIA Tesla V100。 Elastic GPU Service Elastic GPU Service (EGS) は、GPU ベースのコンピューティングサービスです。ディープラーニング、ビデオ処理、科学技術計算、グラフィック可視化などの作業に最適です。EGS は次の GPU を使用しています：AMD FirePro S7150、NVIDIA Tesla M40、NVIDIA Tesla P100、NVIDIA Tesla P4、NVIDIA Tesla V100。   云服务器 クラウドサーバー FPGA 云服务器 FPGAクラウドサーバ FPGAの例、低遅延プログラマブルハードウェアアクセラレーションサービス []()  []()    云服务器 クラウドサーバー 专有宿主机 専有ホスト セキュリティコンプライアンス、パブリッククラウド上に独自のリソースのプールを構築 Dedicated Host 専用ホスト（DDH）は、テナントがAlibaba Cloud仮想ホスティングサービスに基づく専用ハードウェアリソースを使用できるようにするホストサービスです。 このサービスにより、企業はカスタム展開を実現し、独自のライセンス（BYOL）を取得し、セキュリティと規制に準拠することができます。 DDHは複数の種類のECSインスタンスをサポートします。 DDH上に作成されたECSインスタンスは、クラウド内に作成された他のECSインスタンスと同じパフォーマンスと安定性を備えています。 Dedicated Host Alibaba Cloud Dedicated Host (DDH) は、Alibaba Cloud の仮想化ホスティングを使用し、物理ホストを占有したシングルテナント環境を提供します。セキュリティ、コンプライアンス、ECSの柔軟な移行、ライセンス（BYOL）の要件を満たします。また、DDH 上で複数のスペックの ECS インスタンスを作成でき、ECS インスタンスのスペック選択の柔軟性と安定したパフォーマンス、および機能を継承することができます。   高性能计算 HPC 高性能コンピューティングHPC 超级计算集群 スーパーコンピューティングクラスター RDMAをサポートして、極端な並列コンピューティング性能のサンプル仕様を提供 Super Computing Cluster Super Computing Cluster（SCC）サーバは、Elastic Bare Metal（EBM）インスタンスとRDMA（Remote Direct Memory Access）テクノロジの高速相互接続性に基づいて、ネットワークパフォーマンスを向上させ、大規模クラスタの加速率を向上させます。 SCCサーバは、EBMインスタンスのすべての利点を誇り、高帯域幅と低レイテンシで高品質のネットワークパフォーマンスを実現します。 Super Computing Cluster Super Computing Cluster (SCC) サーバーは、ECS Bare Metal Instance と Remote Direct Memory Access (RDMA) 技術の高速相互接続により、ネットワークパフォーマンスを改善し、大規模クラスターの加速率を向上させます。SCC サーバーは、ECS Bare Metal Instance のすべての利点を備え持ち、高帯域幅、低レイテンシの高品質なネットワークパフォーマンスを特徴としています。人工知能、科学技術計算、オーディオ/ビデオ処理に必要な高性能コンピューティングに対応します。   高性能计算 HPC 高性能コンピューティングHPC 弹性高性能计算 E-HPC 柔軟な高性能コンピューティングE-HPC ディープラーニング、レンダリング、科学計算を加速するGPUフィジックスマシン E-HPC Alibaba Cloudインフラストラクチャに基づいたAlibaba Cloud Elastic High Performance Computing（E-HPC）は、エンドツーエンドのパブリッククラウドサービスです。 E-HPCは、個々のユーザー、教育研究機関、および公的機関に、Alibaba Cloud製品と相互接続する高速で弾力性のある安全なクラウドコンピューティングプラットフォームを提供します。 E-HPC HPC 機能の需要増大に対応するため、HPCaaS クラウドサービスとして Elastic High Performance Computing (E-HPC) を提供します。オールインワンの高性能コンピューティングサービスを可能にするクラウドプラットフォームを使用できます。E-HPC は AI、および大規模データ分析などの能力を必要とする組織に適しています。   容器服务 コンテナサービス 容器服务 コンテナサービス マイクロサービスアーキテクチャとフルライフサイクル管理をサポートするDockerサービス Container Service Container Serviceは、DockerとKubernetesを使用してコンテナ化されたアプリケーションのライフサイクルを管理できる、高性能でスケーラブルなコンテナアプリケーション管理サービスです。 Container Service Alibaba Cloud Container Service はフルマネージドのクラウドコンテナー管理サービスです。Alibaba Cloud ECS インスタンスの分散クラスター上にある Docker アプリケーションを効率的に実行、管理できます。よって、従来のような個別でのコンテナークラスター基盤の導入や、運用、オートスケーリングなどの拡張設計が不要になります。アプリケーション開発作業など、本来の作業に集中できます。   容器服务 コンテナサービス 容器服务 Kubernetes 版 コンテナサービスKubernetes版 エンタープライズクラスのKubernetesコンテナアプリケーションのフルライフサイクル管理をサポートするための、高性能でスケーラブルなコンテナアプリケーション管理機能を提供します。 Container Service for Kubernetes Kubernetesのコンテナサービスは、アプリケーションのライフサイクルを通して、Kubernetesのコンテナ化されたアプリケーションのエンタープライズレベルの高性能で柔軟な管理を提供します。 このサービスはクラスターの作成と拡張を簡素化し、仮想化、ストレージ、ネットワーク、そしてセキュリティにAlibaba Cloudの機能を統合し、Kubernetesコンテナーアプリケーションの実行環境を改善します。 Container Service for Kubenetes Container Service for Kubernetes はフルマネージドのクラウドコンテナー管理サービスです。Kubernetes に対応し、他の Alibaba Cloud プロダクトと連携します。従来のような個別でのコンテナークラスター基盤の導入や、運用、オートスケーリングなどの拡張設計が不要になります。このため、アプリケーション開発作業など、本来の作業に集中できるようになります。   容器服务 コンテナサービス 弹性容器实例 ECI フレキシブルコンテナインスタンスECI 機敏で安全なサーバーレスコンテナランタイムサービスを提供します。 Elastic Container Instance Elastic Container Instance（ECI）は、機敏で安全なサーバーレスコンテナインスタンスサービスです。 サーバーを管理しなくても簡単にコンテナーを実行できます。 また、コンテナによって消費されたリソースに対してのみ支払います。 ECIは、インフラストラクチャを管理するのではなく、ビジネスアプリケーションに集中するのに役立ちます。 []()    容器服务 コンテナサービス 容器镜像服务 コンテナミラーリングサービス 多地域画像ホスティングをサポートする、レジストリの設定と操作の簡素化 Container Registry Container Registryを使用すると、イメージのライフサイクルを通してイメージを管理できます。 安全な画像管理、世界中の地域で安定した画像作成、そして簡単な画像許可管理を提供します。 このサービスは、イメージレジストリの作成と保守を簡素化し、複数の地域でのイメージ管理をサポートします。 Container Serviceなどの他のクラウドサービスと組み合わせると、Container RegistryはクラウドでDockerを使用するための最適化されたソリューションを提供します。 []()    弹性编排 弾性配置 弹性伸缩 弾性膨張 エラスティックコンピューティングリソースの管理サービスを自動的に調整する Auto Scaling Auto Scalingは、大量のユーザー要求に基づいてコンピューティングリソースを自動的に調整するサービスです。 コンピューティングリソースの需要が増えると、Auto Scalingは自動的にECSインスタンスを追加して追加のユーザー要求を処理します。あるいは、ユーザー要求が減った場合はインスタンスを削除します。 Auto Scaling Auto Scaling は、お客様のビジネスニーズとポリシーに合わせて、コンピューティングリソースを自動調整するサービスです。コンピューティングリソースの需要が増加すると、ユーザーリクエストの増加に対応できるよう、Auto Scaling によって自動的に ECS インスタンスが追加されます。ユーザーリクエストが減少すると、自動的にインスタンスが削除されます。このサービスは、無料でご利用いただけます。課金対象は、追加された ECS リソースの料金のみです。   弹性编排 弾性配置 资源编排 リソース配置 リソース一括コピー、作成および構成を提供する複雑な環境配置ツール Resource Orchestration Service Alibabaクラウドリソースオーケストレーションサービス（ROS）は、開発者とシステム管理者に、Alibabaクラウドリソースを作成および管理するための簡単な方法を提供します。 ROSを通じて、JSON形式のテキストファイルを使用して、必要なAlibaba Cloudリソース、リソース間の依存関係、および設定の詳細を定義できます。 Resource Orchestration Service クラウド環境の構成をテンプレートに定義し、テンプレートに応じてプロビジョニングすることができるオーケストレーションサービスです。   Serverless サーバーレス 函数计算 関数計算 サーバーなどのインフラストラクチャを管理する必要なしに、関数計算によってコードをアップロードする、イベント駆動型の完全管理コンピューティングサービス Function Compute Alibaba Cloud Function Computeは、完全管理のイベント駆動型コンピューティングサービスです。 サーバーなどのインフラストラクチャを管理する必要なしに、コードの作成とアップロードに集中することができます。 Function Computeは計算リソースを提供するため、コードをより柔軟かつ確実に実行できます。 さらに、コードを実行するときに消費されたリソースに対してのみ支払う必要があります。 コードを実行しない場合、料金はかかりません。 Function Compute Alibaba Cloud Function Compute はイベント駆動型のフルマネージドコンピューティングサービスです。お客様はサーバーなどインフラストラクチャを管理する必要がなくなりコーディングに集中できます。Function Compute はコンピューティングリソースを提供し、柔軟かつ信頼性の高い方式でコードを実行できます。またコード実行時支払う必要があるのは消費したリソースの分だけで、コードを実行しなければ料金は発生しません。   其他 その他の 批量计算 バッチ計算 大規模並列バッチコンピューティングサービス Batch Compute Batch Computeは、大規模な同時バッチ処理用のクラウドサービスです。 システムはリソースを自動的に管理し、タスクをスケジュールし、データをロードし、使用量ごとに請求します。 Batch Computeは、科学的応用、遺伝的データ分析、CGIレンダリング、メディアトランスコーディング、財務データ分析などのシナリオですでに広く使用されています。 []()    其他 その他の 图形工作站（公测中） グラフィックワークステーション（パブリックベータ版） リモートデスクトップ機能やノンリニア編集ソフトウェアなどの完全なグラフィック画像処理フローを提供し、高解像度デスクトップのリアルタイム対話を可能にします []()  []()    云存储 クラウドストレージ 对象存储 OSS オブジェクトストレージOSS N/A Object Storage Service Alibaba Cloud Object Storage Service (OSS) is an encrypted, secure, cost-effective, and easy-to-use object storage service that enables you to store, back up, and archive large amounts of data in the cloud, with a guaranteed reliability of 99.</description>
    </item>
    
    <item>
      <title>第3章 Terraform の基本</title>
      <link>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/how_to_use_terraform/</link>
      <pubDate>Wed, 15 May 2019 10:37:37 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/how_to_use_terraform/</guid>
      <description>本章では Terraform の基本、使い方を学びます。 簡単なWebサーバを立ち上げながら、Terraformの流れや中身を確認します。
3.1 ディレクトリ・ファイル構成 Terraformのファイルの拡張子は *.tf です。 実行時、同じディレクトリの *.tf ファイルがマージされますので、以下3ファイルに分けてそれぞれの用途・目的に応じた記載・運用がベターです。
main.tf … モジュールが内包するリソース、データソースなどの定義 outputs.tf … モジュールが出力するAttributeの定義 variables.tf … モジュールが受け取る変数の定義  main.tf には どのプロパイダを使うかを記載します。 階層化は任意ですが、.tfから別のフォルダの.tfに記載されてる変数を取り出すためにルートディレクトリを指定することがありますのでそこは注意が必要です。apply (=実行) にて分離実行することも可能です。
├── main.tf ├── output.tf ├── variables.tf │ ├── region │├── VPC ││├── main.tf ││├── output.tf ││└── variables.tf ││ │├── ECS ││├── main.tf ││├── output.tf ││└── variables.tf ・ ・ ・  RAMなど他者へ渡したくない情報がある場合、別途設定ファイル（ terraform.confing など）へ記載し、実行時は -var-file引数で 設定ファイルを読み取り実行することができます。
▼リスト 3.1.1 設定ファイル terraform.confing の中身
access_key = &amp;quot;xxxxxxxxxxxxxxxxxx&amp;quot; secret_key = &amp;quot;xxxxxxxxxxxxxxxxxx&amp;quot; region = &amp;quot;ap-northeast-1&amp;quot; zone = &amp;quot;ap-northeast-1a&amp;quot;  記載した設定ファイルterraform.</description>
    </item>
    
    <item>
      <title>第5章 権限管理</title>
      <link>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/authority_management/</link>
      <pubDate>Wed, 15 May 2019 10:37:37 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/alibabacloud%E3%81%AE%E6%B4%BB%E7%94%A8/authority_management/</guid>
      <description>AAlibabaCloudはどのサービスを利用・操作するにしろ権限が必要です。 Terraformで作成したリソースサービスにも他ユーザが操作できるように権限アタッチが必要になります。 本章では、AlibabaCloudサービスに対する権限付与の方法を学びます。
5.1 Alibaba CloudのRAMについて RAM（Resource Access Management）はユーザーID の管理とアクセス制御、権限管理のためのサービスです。 RAMを使用することで、ユーザーアカウント (従業員、システム、アプリケーションなど) を作成および管理し、Alibaba Cloud アカウントのリソースに対してそのユーザーアカウントが所有する操作権限を制御できます。Terraformによるリソースを実行するときはRAMで実行権限が必須です。
5.2 RAMロールとRAMユーザーの違い ・RAMロールは仮想ID であり、固定のIDは持っていますが、ID認証情報アクセスキーを持ちません。 ・RAMユーザは、固定のIDとID認証アクセスキーを持つ実際のIDであり、一般的には、特定のユーザーまたはアプリケーションに対応します。
graph LR; A(&amp;quot;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;quot;)-.-&amp;gt;B(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;quot;) A(&amp;quot;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;quot;)-.-&amp;gt;C(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;quot;) B(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;quot;)-.-&amp;gt;D(&amp;quot;ロール(役割)&amp;quot;) C(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;quot;)-.-&amp;gt;E(&amp;quot;ユーザ(人)&amp;quot;) D(&amp;quot;ロール(役割)&amp;quot;)-.-&amp;gt;F(&amp;quot;ロール(役割)を&amp;lt;br&amp;gt;エンティティ(ECSインスタンスなど）にアタッチ&amp;quot;) A(&amp;quot;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;quot;)-.-&amp;gt;G(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;quot;) G(&amp;quot;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;quot;)-.-&amp;gt;H(&amp;quot;グループ（ユーザの集まり）&amp;quot;)  RAMロールは権限が付与された実際のユーザーが引き受ける必要があります。ロールを引き受けると実際のユーザーはこのRAMロールの一時セキュリティトークンを受け取ります。これにより、この一時セキュリティトークンを使用して、ロールに許可されているリソースにアクセスできます。
普段の利用時はRAMユーザで管理・運用していくのがベストプラクティスですが、Terraform利用時は基本的にAdministratorAccessが必要となります。
5.3 ポリシー 権限はポリシーで定義します。ポリシーでは「実行可能なアクション」や「操作可能なリソース」を指定でき、柔軟に権限が設定できます。
5.3.1 ポリシードキュメント ポリシードキュメントはJSON形式で管理しており、リスト5.3.1.1のようにまとめます。 ▼リスト 5.3.1.1 JSON 形式のポリシードキュメント
{ &amp;quot;Statement&amp;quot;: [ { &amp;quot;Action&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot; } ], &amp;quot;Version&amp;quot;: &amp;quot;1&amp;quot; }  ポリシードキュメントでは、次のような要素を記述します。 * Effect - 許可する場合はAllow、許可しない場合はDeny * Resource - AlibabaCloudの操作可能なリソース・許可されたオブジェクトはなにかを指定します。たとえば ”ユーザAがリソースSampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、ResourceはSampleBucket です。 * Action - AlibabaCloudの各種サービスでどんな操作が実行できるか。サービスを個別指定することも可能。たとえば ”ユーザAがリソースSampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、ActionはGetBucket です。 * Condition - 権限付与が有効になる条件です。たとえば、”ユーザAが2018年12月31日より前にリソース SampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、Conditionは 2018年12月31日より前 です。</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>https://sbcloud.github.io/tech-docs/%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E5%88%A5%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/k8s/</link>
      <pubDate>Mon, 13 May 2019 16:20:40 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E5%88%A5%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/k8s/</guid>
      <description> Hello world Hello world </description>
    </item>
    
    <item>
      <title>アカウント管理</title>
      <link>https://sbcloud.github.io/tech-docs/faqmore/management/</link>
      <pubDate>Thu, 04 Apr 2019 15:47:38 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/faqmore/management/</guid>
      <description>料金 Q. マイクロチャージの仕様について クレジットカードをご登録またはご追加の際に、マイクロチャージというクレジットカードの有効性を確認するプロセスにより、少額の課金（通常は100円以内）が発生します。 該当課金は、AlibabaCloudから24時間以内にカードに払い戻ししますが、カード発行会社により、ご利用のカードに対する払い戻しをご確認いただけるまでに 30 日程度を要する場合があります。
実際にAlibabaCloudが領収してないため、請求書の発行はできかねます。 また、カード会社の請求締切日により、カード会社からお客様に請求してから翌月に返金する可能性もあります。詳細はカード会社にお問合せください。
Q. コンソールに表示される月の使用金額と実際請求額の差分について コンソールに表示される月の使用金額と実際の請求額に差分が発生する場合があります。これは、従量課金インスタンス料金の合計方法によるものです。
従量課金インスタンスに発生した料金は、1時間1レコードとして小数点以下4桁まで記録されます。 コンソールに表示される月の使用金額に、上記全レコードの合計値が表示されます。 一方、実際請求額の計算では、先に製品ごとに発生した料金（製品ごとの全レコード）を合計し、小数点以下を切り捨てた後、再度合計するため、コンソールに表示される月の使用金額より低い場合があります。
Q. 月の従量課金が10円未満場合の課金方法について A:
Q. サブスクリプション及び従量課金の請求時期について A:
Q. サブスクリプション及び従量課金の請求失敗後の動作について A:
Q. 利用明細のダウンロード可能時期と見方について A:
Q. 請求書払いの申請方法について A:
Q. 請求書払いの締切日と発行日について A:
Q. インスタンス自動更新失敗後の動作について A:
Q. 自動更新OFFの状態で有効期限切れ後の更新方法について A:
Q. サブスクリプションインスタンスの削除方法について A:
Q. 無料トライアルクーポンの入手方法と確認場所について A:
Q. クーポンで支払い可能な範囲について A:
Q. 複数クーポンの消費順番について A:
アカウント Q. TOTP認証利用できなくなった時の対応方法について A
Q. メールアドレスの変更方法について A
Q. クレジットカードの変更方法について A
Q. アカウント登録氏名（社名）の変更方法について a
Q. コンソール自動ログアウトの仕様について a
Q. サポートセンターの対応範囲について a</description>
    </item>
    
    <item>
      <title>ECS</title>
      <link>https://sbcloud.github.io/tech-docs/faqmore/ecs/</link>
      <pubDate>Wed, 03 Apr 2019 15:47:38 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/tech-docs/faqmore/ecs/</guid>
      <description>一般仕様 Q. ゾーンの識別文字のマッピング仕様について A
Q. 1つのアカウント/リージョン配下のECS購入台数制限について A
Q. サブスクリプションECSのライフサイクルについて A
Q. RDSCALとクライアントCALの必要性について A
Q. ECSのデフォルトタイムゾーンについて A
Q. スナップショット取得時の性能影響について A
Q. 購入可能な従量課金インスタンスの上限について A
Q. 25番ポートの制限について A
Q. ICP必要性の判断方法について A
Q. インスタンススペックのアップグレード方法について A
ネットワーク Q. VPCとVswitchの変更方法について A
Q. VPCで指定可能なCIDRブロックについて A
Q. EIPとパブリックIPの違いについて A
Q. EIPとパブリックIPの帯域幅の変更方法について A
Q. プライベートIPの変更方法について A
Q. インバウンドとアウトバウンド帯域幅の制限値について A
イメージ Q. イメージのインポート方法について A
Q. クラウド移転ツールについて A
Q. イメージのエクスポート方法について A
Q. イメージのリージョン間コピー方法について A
ディスク Q. システムディスクとデータディスクの違いについて A
Q. クラウドディスクの拡張方法について A</description>
    </item>
    
  </channel>
</rss>